//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `simple_tick_2.json`.
    static let simple_tick_2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "simple_tick_2", pathExtension: "json")
    
    /// `bundle.url(forResource: "simple_tick_2", withExtension: "json")`
    static func simple_tick_2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.simple_tick_2Json
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `appium`.
    static let appium = Rswift.ImageResource(bundle: R.hostingBundle, name: "appium")
    
    /// `UIImage(named: "appium", bundle: ..., traitCollection: ...)`
    static func appium(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appium, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `UserInfo`.
    static let userInfo = _R.storyboard.userInfo()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "UserInfo", bundle: ...)`
    static func userInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.userInfo)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 1 localization keys.
    struct launchScreen {
      /// pt-BR translation: Label
      /// 
      /// Locales: pt-BR
      static let vRkDjYXtText = Rswift.StringResource(key: "VRk-dj-yXt.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      
      /// pt-BR translation: Label
      /// 
      /// Locales: pt-BR
      static func vRkDjYXtText(_: Void = ()) -> String {
        return NSLocalizedString("VRk-dj-yXt.text", tableName: "LaunchScreen", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// Base translation:  and you are 
      /// 
      /// Locales: Base, pt-BR
      static let ageInfo = Rswift.StringResource(key: "AgeInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "pt-BR"], comment: nil)
      /// Base translation:  years old!
      /// 
      /// Locales: Base, pt-BR
      static let yearsOld = Rswift.StringResource(key: "YearsOld", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "pt-BR"], comment: nil)
      /// Base translation: An error has occurred, please try again later
      /// 
      /// Locales: Base, pt-BR
      static let genericErrorMessage = Rswift.StringResource(key: "GenericErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "pt-BR"], comment: nil)
      /// Base translation: Ok
      /// 
      /// Locales: Base, pt-BR
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "pt-BR"], comment: nil)
      /// Base translation: Please fill all the requested fields
      /// 
      /// Locales: Base, pt-BR
      static let emptyFieldMessage = Rswift.StringResource(key: "EmptyFieldMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "pt-BR"], comment: nil)
      /// Base translation: Your name is 
      /// 
      /// Locales: Base, pt-BR
      static let nameInfo = Rswift.StringResource(key: "NameInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "pt-BR"], comment: nil)
      
      /// Base translation:  and you are 
      /// 
      /// Locales: Base, pt-BR
      static func ageInfo(_: Void = ()) -> String {
        return NSLocalizedString("AgeInfo", bundle: R.hostingBundle, value: " and you are ", comment: "")
      }
      
      /// Base translation:  years old!
      /// 
      /// Locales: Base, pt-BR
      static func yearsOld(_: Void = ()) -> String {
        return NSLocalizedString("YearsOld", bundle: R.hostingBundle, value: " years old!", comment: "")
      }
      
      /// Base translation: An error has occurred, please try again later
      /// 
      /// Locales: Base, pt-BR
      static func genericErrorMessage(_: Void = ()) -> String {
        return NSLocalizedString("GenericErrorMessage", bundle: R.hostingBundle, value: "An error has occurred, please try again later", comment: "")
      }
      
      /// Base translation: Ok
      /// 
      /// Locales: Base, pt-BR
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("Ok", bundle: R.hostingBundle, value: "Ok", comment: "")
      }
      
      /// Base translation: Please fill all the requested fields
      /// 
      /// Locales: Base, pt-BR
      static func emptyFieldMessage(_: Void = ()) -> String {
        return NSLocalizedString("EmptyFieldMessage", bundle: R.hostingBundle, value: "Please fill all the requested fields", comment: "")
      }
      
      /// Base translation: Your name is 
      /// 
      /// Locales: Base, pt-BR
      static func nameInfo(_: Void = ()) -> String {
        return NSLocalizedString("NameInfo", bundle: R.hostingBundle, value: "Your name is ", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.userInfo` struct is generated, and contains static references to 5 localization keys.
    struct userInfo {
      /// pt-BR translation: Idade:
      /// 
      /// Locales: pt-BR
      static let gtgetLgJText = Rswift.StringResource(key: "GTG-eT-LgJ.text", tableName: "UserInfo", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      /// pt-BR translation: LIMPAR CAMPOS
      /// 
      /// Locales: pt-BR
      static let tZkYkEZ3NormalTitle = Rswift.StringResource(key: "TZk-yk-EZ3.normalTitle", tableName: "UserInfo", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      /// pt-BR translation: Nome:
      /// 
      /// Locales: pt-BR
      static let dRjZGHMnText = Rswift.StringResource(key: "dRj-zG-hMn.text", tableName: "UserInfo", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      /// pt-BR translation: OK
      /// 
      /// Locales: pt-BR
      static let oaJNMb9NormalTitle = Rswift.StringResource(key: "9Oa-JN-mb9.normalTitle", tableName: "UserInfo", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      /// pt-BR translation: Seu nome é Luca e você tem 21 anos!
      /// 
      /// Locales: pt-BR
      static let f4UKTJjZText = Rswift.StringResource(key: "F4U-KT-JjZ.text", tableName: "UserInfo", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      
      /// pt-BR translation: Idade:
      /// 
      /// Locales: pt-BR
      static func gtgetLgJText(_: Void = ()) -> String {
        return NSLocalizedString("GTG-eT-LgJ.text", tableName: "UserInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: LIMPAR CAMPOS
      /// 
      /// Locales: pt-BR
      static func tZkYkEZ3NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("TZk-yk-EZ3.normalTitle", tableName: "UserInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Nome:
      /// 
      /// Locales: pt-BR
      static func dRjZGHMnText(_: Void = ()) -> String {
        return NSLocalizedString("dRj-zG-hMn.text", tableName: "UserInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: OK
      /// 
      /// Locales: pt-BR
      static func oaJNMb9NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("9Oa-JN-mb9.normalTitle", tableName: "UserInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// pt-BR translation: Seu nome é Luca e você tem 21 anos!
      /// 
      /// Locales: pt-BR
      static func f4UKTJjZText(_: Void = ()) -> String {
        return NSLocalizedString("F4U-KT-JjZ.text", tableName: "UserInfo", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try userInfo.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "appium") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'appium' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct userInfo: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let formViewController = StoryboardViewControllerResource<FormViewController>(identifier: "FormViewController")
      let name = "UserInfo"
      let userInfoViewController = StoryboardViewControllerResource<UserInfoViewController>(identifier: "UserInfoViewController")
      
      func formViewController(_: Void = ()) -> FormViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: formViewController)
      }
      
      func userInfoViewController(_: Void = ()) -> UserInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userInfoViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.userInfo().formViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'formViewController' could not be loaded from storyboard 'UserInfo' as 'FormViewController'.") }
        if _R.storyboard.userInfo().userInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userInfoViewController' could not be loaded from storyboard 'UserInfo' as 'UserInfoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
